{
  "nodes": [
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update nlp_test_case_step\nset wait_time = {{ $json.step_level_step_timeout}}\nwhere id = {{ $('Edit Fields1').item.json.step_id }};\n\nUPDATE execution \nSET step_time_out = {{ $json.execution_step_timeout}}, \n    page_time_out = {{ $json.execution_page_time_out }}\nWHERE id = ({{ $('environment_result1').item.json.id }});\n\n",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        440,
        180
      ],
      "id": "05039cae-dbaa-48ab-a6e4-6bdf23135525",
      "name": "Update timeouts",
      "credentials": {
        "mySql": {
          "id": "ZyZtIK7Uxr9MWwSC",
          "name": "Tenant---maintainance"
        }
      }
    },
    {
      "parameters": {
        "content": "## TimeOut issue handling",
        "height": 280,
        "width": 720,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -60,
        100
      ],
      "id": "da844234-a8cf-48bb-8534-6a9e8e71afa6",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select id , step_time_out , enforce_time_out , page_time_out  from execution where id in (select execution_id from execution_result where id in (select execution_result_id from test_case_result where id = {{ $('Edit Fields1').item.json.test_case_result_id }}));",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        0,
        180
      ],
      "id": "6b5754aa-24f3-4ed9-8c18-203e6ac2ec13",
      "name": "environment_result1",
      "credentials": {
        "mySql": {
          "id": "ZyZtIK7Uxr9MWwSC",
          "name": "Tenant---maintainance"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4f8d7db2-cb96-4f8e-afa3-737a5c211636",
              "name": "step_id",
              "value": "797",
              "type": "string"
            },
            {
              "id": "e14cb3a3-05c3-45fe-a7c7-a1bd74a34f63",
              "name": "test_case_result_id",
              "value": "71",
              "type": "string"
            },
            {
              "id": "022f1270-bd08-4ce1-91c8-80e5a73be919",
              "name": "tenant_id",
              "value": "200001225",
              "type": "string"
            },
            {
              "id": "6b32d0ca-530a-42ae-a0d3-49f5b9632aab",
              "name": "stack",
              "value": "devtesting",
              "type": "string"
            },
            {
              "id": "3a371cc3-a027-4061-a9d9-b8a798da8537",
              "name": "path",
              "value": "/Users/moneshwar/Github_repos/analyzer-agent",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1860,
        860
      ],
      "id": "ee20f7bb-f969-465b-b628-fce07b9f1820",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "operation": "fromJson",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -720,
        860
      ],
      "id": "9a542204-cf3d-4834-909f-14fe1740efb7",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "jsCode": "const result = {\n  step_level_step_timeout: $('Test Step').first().json.wait_time,\n  execution_step_timeout:$input.first().json.step_time_out ,\n  execution_page_time_out: $input.first().json.page_time_out\n};\n\n// Step Timeout changes\nif($input.first().json.enforce_time_out == 1) {\n  // Plan Level\n  if($input.first().json.step_time_out < 20)\n    result.execution_step_timeout = 30\n  else\n    result.execution_step_timeout = $input.first().json.step_time_out + 10;\n  \n}\nelse {\n  // Step Level\n  if($('Test Step').first().json.wait_time < 20)\n    result.step_level_step_timeout = 30;\n  else\n    result.step_level_step_timeout = $('Test Step').first().json.wait_time + 10;\n  \n}\n\nif($input.first().json.page_time_out < 20)\n  result.execution_page_time_out = 30;\nelse\n  result.execution_page_time_out = $input.first().json.page_time_out + 10;\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        180
      ],
      "id": "d97f1f03-e926-4df2-8584-bd6bed0f59ef",
      "name": "Populate new timeout values"
    },
    {
      "parameters": {
        "content": "## Test Data",
        "height": 460,
        "width": 1840
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -40,
        860
      ],
      "typeVersion": 1,
      "id": "32e803f6-44be-4acf-8d79-c64ca3dc4139",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=select id ,test_step_id , test_data_key ,type , value   from test_step_data where test_step_id = {{$('Test Step').item.json.id }} ",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        60,
        960
      ],
      "id": "9d2a205b-b0db-40fb-8dc1-9264ef7b0d30",
      "name": "Data For TestData update",
      "credentials": {
        "mySql": {
          "id": "ZyZtIK7Uxr9MWwSC",
          "name": "Tenant---maintainance"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Your goal is to modify the test data values to align with the expected data mentioned in the error analysis.\n\nYou will be given three inputs:\n\n1. Error Analysis:\n<error_analysis>\n{{ $('Extract from File').item.json.data.output }}\n</error_analysis>\n\n2. Test Data:\n<test_data>\n{{ JSON.stringify($('Data For TestData update').all().map((item)=>item.json))}}\n</test_data>\n\n3. Test Step:\n<test_step>\n{{ $('Test Step').item.json.action }}\n\n## Test Step Template\n{{ JSON.stringify($('Template Population').item) }}\n</test_step>\n\nFollow these steps to complete the task:\n\n1. Analyze the error_analysis input:\n   - Identify the classified_error type\n   - Understand the root_cause of the error\n   - Review the suggestions provided\n\n2. Examine the test_data input:\n   - Look for test data objects that may be related to the error\n   - Pay attention to the test_data_key and value fields\n\n3. Determine which test data value(s)in a given <test_step> which might have  need to be modified based on the root_cause and suggestions.\n\n4. Modify only the value field(s) in the test data to correct the error:\n   - Ensure the corrected value aligns with the expected data mentioned in the root_cause\n   - If the actual value is explicitly mentioned in the error analysis, use that value\n   - Do not modify any other attributes of the test data objects\n\n5. Prepare the output:\n   - Include all test data objects, even if they were not modified\n   - Ensure the output maintains the same structure as the input test data\n\nImportant reminders:\n- Only modify the value field(s) in the test data\n- Do not change any other attributes or add/remove objects from the test data\n- Ensure your changes align with the error analysis information\n- Include all test data objects in the output, even if they were not modified\n- There may be multiple test data objects, but only modify and provide outputs for the required ones\n- The main aim is to make the test case pass\n- Do not add any extra text or explanations to the output\n\nProvide the corrected test data as normal text without any additional formatting or comments. The output should be in the following format:\n\n[\n  {\n    \"id\": 1,\n    \"test_data_key\": \"example-key\",\n    \"type\": \"raw\",\n    \"value\": \"corrected-value\"\n  },\n  {\n    \"id\": 2,\n    \"test_data_key\": \"another-key\",\n    \"type\": \"raw\",\n    \"value\": \"unchanged-value\"\n  }\n]\n\nRemember to include all test data objects in the output, even if they were not modified. Do not modify the id field or any other attributes except the value field when necessary.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are an AI assistant tasked with analyzing test automation data and correcting test inputs based on error classifications and suggestions."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        460,
        960
      ],
      "id": "9aa19e76-d4d7-4b5e-b30c-fa261483027a",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1220,
        960
      ],
      "id": "7ade45e9-e2fb-41ed-8dd6-2d1a1f93d74f",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update test_step_data set value = {{\"\\\"\" +$json.value +\"\\\"\"}} where id = {{ $json.id }};",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        1600,
        980
      ],
      "id": "8c719dbe-0042-4101-83be-f10c419d64d4",
      "name": "Update Test_data",
      "credentials": {
        "mySql": {
          "id": "ZyZtIK7Uxr9MWwSC",
          "name": "Tenant---maintainance"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return JSON.parse($input.first().json.output)"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        960
      ],
      "id": "aefb6e46-2056-4fa5-8848-9314a84520d1",
      "name": "JSON parsing"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select id, database_name, shard from tenants where id ={{ $json.tenant_id }};",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        -1640,
        860
      ],
      "id": "682450e7-f094-4b14-a60a-4af3ce4b519c",
      "name": "Retrive tenant",
      "credentials": {
        "mySql": {
          "id": "vDHqi7RExGEpBKRp",
          "name": "Master Maintainence"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select id , action , template_id , wait_time , max_retries , test_case_id from nlp_test_case_step where id = {{ $('Edit Fields1').item.json.step_id }}",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        -1420,
        860
      ],
      "id": "f05df6cf-8daa-40c5-b08b-684408ae6fa3",
      "name": "Test Step",
      "credentials": {
        "mySql": {
          "id": "ZyZtIK7Uxr9MWwSC",
          "name": "Tenant---maintainance"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select grammer , data , action ,data_attributes  from nlp_test_case_step_templates where id = {{ $json.template_id }}",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        -1180,
        860
      ],
      "id": "c8c72137-9d0a-4a0e-acd3-5ac688ea89ce",
      "name": "Template Population",
      "credentials": {
        "mySql": {
          "id": "vDHqi7RExGEpBKRp",
          "name": "Master Maintainence"
        }
      }
    },
    {
      "parameters": {
        "bucketName": "custify-raw-data",
        "fileKey": "=analyzer-agent/{{ $('Edit Fields1').item.json.tenant_id }}/case-{{ $('Test Step').item.json.test_case_id }}/suggestions/suggestion-{{ $('Edit Fields1').item.json.test_case_result_id }}.json"
      },
      "type": "n8n-nodes-base.s3",
      "typeVersion": 1,
      "position": [
        -940,
        860
      ],
      "id": "035e804c-9de1-4e5f-87a1-64fe7f036a64",
      "name": "Analyser Suggestion Download",
      "credentials": {
        "s3": {
          "id": "IttgcuyQmGboGqT1",
          "name": "S3 account"
        }
      }
    },
    {
      "parameters": {
        "model": "anthropic.claude-3-5-sonnet-20240620-v1:0",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAwsBedrock",
      "typeVersion": 1,
      "position": [
        460,
        1160
      ],
      "id": "0794e03a-7a38-4f98-bec5-ed010fdb8ce7",
      "name": "AWS Bedrock Chat Model",
      "credentials": {
        "aws": {
          "id": "WJBOB7X7sU9kIhO8",
          "name": "For Bedrock"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json?.data?.output?.errors?.[0]?.classified_error || $json?.data?.output?.parseJson?.().classified_error || $json?.data?.output?.parseJson?.().errors[0].classified_error || $json?.data?.stdout?.parseJson?.()?.classified_error || $json.data.parseJson().classified_error}}",
                    "rightValue": "TIMEOUT",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "f841e02a-0083-42d8-8c27-355a41951298"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "TIMEOUT"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "b343fa81-7cf6-4d48-be40-b1fa18f62919",
                    "leftValue": "={{ $json?.data?.output?.errors?.[0]?.classified_error || $json?.data?.output?.parseJson?.().classified_error || $json?.data?.output?.parseJson?.().errors[0].classified_error || $json?.data?.stdout?.parseJson?.()?.classified_error || $json.data.parseJson().classified_error}}",
                    "rightValue": "LAB",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "LAB"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "46bc3b68-bba2-4a54-a574-b99ad5f6d6c2",
                    "leftValue": "={{ $json?.data?.output?.errors?.[0]?.classified_error || $json?.data?.output?.parseJson?.().classified_error || $json?.data?.output?.parseJson?.().errors[0].classified_error || $json?.data?.stdout?.parseJson?.()?.classified_error || $json.data.parseJson().classified_error}}",
                    "rightValue": "TEST_DATA",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "TEST DATA"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "5c4b5ac8-56f1-4746-a0b6-5bbe1e7e5ed9",
                    "leftValue": "={{[\"TEST_DATA\", \"TIMEOUT\", \"LAB\"]}}",
                    "rightValue": "={{ $json?.data?.output?.errors?.[0]?.classified_error || $json?.data?.output?.parseJson?.().classified_error || $json?.data?.output?.parseJson?.().errors[0].classified_error || $json?.data?.stdout?.parseJson?.()?.classified_error || $json.data.parseJson().classified_error}}",
                    "operator": {
                      "type": "array",
                      "operation": "notContains",
                      "rightType": "any"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "ELEMENT"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -280,
        840
      ],
      "id": "4337a49f-a302-41b2-888c-b576c1d1e4bd",
      "name": "Switch1"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.switch }}",
                    "rightValue": "PATH_ISSUE",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "89dacfcf-352a-42a6-8bc9-ecae81760df0"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "PATH_ISSUE"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        280,
        1600
      ],
      "id": "d00fa205-1205-48f6-9e30-0c843869495e",
      "name": "Switch2"
    },
    {
      "parameters": {
        "bucketName": "custify-raw-data",
        "fileKey": "=analyzer-agent/{{ $('Edit Fields1').item.json.tenant_id }}/case-{{ $('Test Step').item.json.test_case_id }}/mapped-results/result-{{ $('Edit Fields1').item.json.test_case_result_id }}.json"
      },
      "type": "n8n-nodes-base.s3",
      "typeVersion": 1,
      "position": [
        500,
        1600
      ],
      "id": "a161e90c-5ad1-451e-b19f-690a9dd9cdb7",
      "name": "Download mapped results1",
      "credentials": {
        "s3": {
          "id": "IttgcuyQmGboGqT1",
          "name": "S3 account"
        }
      }
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        720,
        1600
      ],
      "id": "c845a3c6-306e-4fec-819b-27a3a6f1a45b",
      "name": "Get mapped results1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a69a67d2-8c46-4e64-aeb2-40832f1f1e68",
              "leftValue": "={{ $json.data.parseJson().failed_result_context_details?.[0]?.element_id }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        940,
        1600
      ],
      "id": "b2944d0a-41c2-44f7-95dd-5b3d9d9d5d0d",
      "name": "If1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT locator_tree_id FROM field_definition WHERE id = {{$('Get mapped results1').item.json.data.parseJson().failed_result_context_details[0].element_id  }}",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        1180,
        1580
      ],
      "id": "ab2533da-6b9a-41e1-81fd-4acbca4490a1",
      "name": "Fetch locator id1",
      "alwaysOutputData": true,
      "credentials": {
        "mySql": {
          "id": "ZyZtIK7Uxr9MWwSC",
          "name": "Tenant---maintainance"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "775d1804-dafe-480a-a356-2713c3c4c814",
              "name": "mapped_results",
              "value": "={{ $('Get mapped results1').item.json.data }}",
              "type": "string"
            },
            {
              "id": "13ac9eba-5718-49f7-9ecf-0ec62fc8e6c5",
              "name": "locator_tree_id",
              "value": "={{ $json.locator_tree_id }}",
              "type": "string"
            },
            {
              "id": "276e9a30-ce92-4703-918c-459149b1c33c",
              "name": "suggestion",
              "value": "={{ $('Extract from File').item.json.data.stdout }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1400,
        1580
      ],
      "id": "bb8153e8-680f-49eb-83a0-ed6483471dd2",
      "name": "Helper input1"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst firstItem =  $input.all()[0]\nconst analyzed_error = JSON.parse(firstItem?.json?.data?.stdout || firstItem?.json?.data).classified_error\n\n\nconst path_issues = [\n    \"ELEMENT_NOT_FOUND\",\n    \"DUPLICATE_UI_IDENTIFIERS\",\n    \"INCORRECT_OR_INVALID_UI_IDENTIFIER\",\n    \"EMPTY_UI_IDENTIFIER\"\n    ]\n\n// const analyzed_error = {$json?.data?.output?.errors?.[0]?.classified_error || $json?.data?.output?.parseJson?.().classified_error || $json?.data?.output?.parseJson?.().errors[0].classified_error || $json.data.stdout.parseJson().classified_error}\n  \nif(path_issues.includes(analyzed_error))\n  return {\n          \"switch\": \"PATH_ISSUE\"\n        }\n  \nreturn $input.all()\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        60,
        1600
      ],
      "id": "c1c84194-2c15-4f83-a536-b60d258bc651",
      "name": "classify issues1"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import json\n\ndef get_locator_tree_url(input, failed_result_context_details):\n  locator_tree_id = input.get('locator_tree_id')\n  locator_tree_url = failed_result_context_details.get(\"element_screenshots\").replace(\"element-screenshot\", \"locator-tree\").rsplit(\"/\", 1)[0]  \n  locator_tree_url = f\"{locator_tree_url}/locator-tree-{locator_tree_id}.json\"\n  return locator_tree_url\n\nfor item in _input.all():\n  input = item.json\n\nmapped_results = json.loads(input.get('mapped_results',{}))\n\nfailed_result_context_details = mapped_results.get('failed_result_context_details')[0]\n\nif (\"element_screenshots\" in failed_result_context_details):\n  failed_result_context_details[\"locator_tree_url\"] = get_locator_tree_url(input, failed_result_context_details)\n\nmapped_results['failed_result_context_details'] = failed_result_context_details\n\nsuggestion_value = input.get('suggestion', {})\n\n# If it's a string, parse it into a dictionary\nif isinstance(suggestion_value, str):\n    suggestion = json.loads(suggestion_value)\nelse:\n    suggestion = suggestion_value  \n  \nprint(suggestion)\n\ninput_json = {\n  \"mapped_results\": {\n    \"step_result_message\": failed_result_context_details.get('message'),\n    \"step_action\": failed_result_context_details.get('action'),\n    \"execution_logs\": failed_result_context_details.get('execution_logs'),\n    \"selenium_logs\": failed_result_context_details.get('selenium_logs'),\n    \"test_case_result_message\": mapped_results.get('test_case_message'),\n  },\n  \"locator_tree_url\": failed_result_context_details.get('locator_tree_url'),\n  \"screenshot_url\": failed_result_context_details.get('screenshots'),\n  \"element_screenshot_url\": failed_result_context_details.get('element_screenshots'),\n  \"failed_locator_url\": failed_result_context_details.get('failed_locator'),\n  \"suggestion\": suggestion,\n  \"step_context\": mapped_results.get('step_results_context')\n}\n  \n\nreturn input_json"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1620,
        1580
      ],
      "id": "0cedb3f9-6daf-4da0-a488-740b31fc5523",
      "name": "Generate prompt input1"
    },
    {
      "parameters": {
        "operation": "toJson",
        "mode": "each",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1840,
        1580
      ],
      "id": "9d09b914-766e-4dee-b269-e70315edb09c",
      "name": "Convert input json to binary data1"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "={{ $('Edit Fields1').item.json.path }}/element_input.json",
        "options": {
          "append": false
        }
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        2080,
        1580
      ],
      "id": "0d65e044-df7e-4226-bdae-29073bddb515",
      "name": "Write input json file1"
    },
    {
      "parameters": {
        "command": "=cd {{ $('Edit Fields1').item.json.path }} && \nsource myenv/bin/activate &&\npython element_maintenance_llm.py --json_file element_input.json"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2300,
        1580
      ],
      "id": "763bda6e-3c9d-44ab-b12f-8d6ca4d3e7bc",
      "name": "Execute Command1"
    },
    {
      "parameters": {
        "content": "## Lab related issues",
        "height": 280,
        "width": 600,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -40,
        440
      ],
      "id": "e61c1c5d-b4d3-4d6d-a888-4f5f4f440731",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "94e29a56-0f3e-4299-91d3-032bd0a2dd76",
              "leftValue": "",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        40,
        540
      ],
      "id": "071e0aac-34f6-43ae-a159-bfcd1871bc3c",
      "name": "If2"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update execution_environment \nset capabilities = {{ $json?.data?.output?.errors?.[0]?.desired_capability_suggestions || $json?.data?.output?.parseJson?.().desired_capability_suggestions || $json?.data?.output?.parseJson?.().errors[0].desired_capability_suggestions}}\nwhere id = (select er.environment_id from environment_result AS er join test_case_result AS tcr on er.id=tcr.env_run_id WHERE tcr.id =  {{ $('Edit Fields1').item.json.test_case_result_id }});\n",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        340,
        520
      ],
      "id": "91d5b1f6-c8ed-4ba3-87d9-bfb30cc6923d",
      "name": "update capabilities",
      "credentials": {
        "mySql": {
          "id": "ZyZtIK7Uxr9MWwSC",
          "name": "Tenant---maintainance"
        }
      }
    },
    {
      "parameters": {
        "content": "## Element\n",
        "height": 360,
        "width": 3060
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -40,
        1480
      ],
      "typeVersion": 1,
      "id": "e929e8eb-9b16-49fe-963a-8a2aeda59b45",
      "name": "Sticky Note1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -2080,
        860
      ],
      "id": "1f0211e5-7df9-4ffb-8470-5ae47db0327c",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update field_definition set field_definition ={{ '\\\"' + $json.stdout.parseJson().field_definition +  '\\\"' }}  ,\nlocator_type_enum = {{ '\\\"' + $json.stdout.parseJson().locator_type_enum +  '\\\"' }}  where id = {{$('Get mapped results1').item.json.data.parseJson().failed_result_context_details[0].element_id  }} ",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        2760,
        1580
      ],
      "id": "5ad476d8-b9bf-4f2a-88c4-816447d20904",
      "name": "MySQL",
      "credentials": {
        "mySql": {
          "id": "ZyZtIK7Uxr9MWwSC",
          "name": "Tenant---maintainance"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "\n$input.all()[0].json.data = $input.all()[0].json.data.replace(/^```json\\n|\\n```$/g, \"\")\nreturn $input.all()"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -500,
        860
      ],
      "id": "d15db4e0-1fc5-4540-85a8-b6394f756977",
      "name": "Removing Json tag ifpresent"
    },
    {
      "parameters": {
        "jsCode": "$input.first().json.stdout = $input.first().json.stdout.replace(/^```json\\n|\\n```$/g, \"\")\nreturn $input.all()"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2540,
        1580
      ],
      "id": "21a487db-df2f-4e34-ad20-9c44163f2e14",
      "name": "Removing Json tag ifpresent1"
    }
  ],
  "connections": {
    "environment_result1": {
      "main": [
        [
          {
            "node": "Populate new timeout values",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Retrive tenant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Removing Json tag ifpresent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Populate new timeout values": {
      "main": [
        [
          {
            "node": "Update timeouts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data For TestData update": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "JSON parsing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Update Test_data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Test_data": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON parsing": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Retrive tenant": {
      "main": [
        [
          {
            "node": "Test Step",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test Step": {
      "main": [
        [
          {
            "node": "Template Population",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Template Population": {
      "main": [
        [
          {
            "node": "Analyser Suggestion Download",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyser Suggestion Download": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AWS Bedrock Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "environment_result1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Data For TestData update",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "classify issues1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch2": {
      "main": [
        [
          {
            "node": "Download mapped results1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download mapped results1": {
      "main": [
        [
          {
            "node": "Get mapped results1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get mapped results1": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Fetch locator id1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch locator id1": {
      "main": [
        [
          {
            "node": "Helper input1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Helper input1": {
      "main": [
        [
          {
            "node": "Generate prompt input1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "classify issues1": {
      "main": [
        [
          {
            "node": "Switch2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate prompt input1": {
      "main": [
        [
          {
            "node": "Convert input json to binary data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert input json to binary data1": {
      "main": [
        [
          {
            "node": "Write input json file1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Write input json file1": {
      "main": [
        [
          {
            "node": "Execute Command1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command1": {
      "main": [
        [
          {
            "node": "Removing Json tag ifpresent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "update capabilities",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Removing Json tag ifpresent": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Removing Json tag ifpresent1": {
      "main": [
        [
          {
            "node": "MySQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b5cff35ee23cc56c30ead78eebf7e655fbec693f9201b19ee47eb093083ae09e"
  }
}