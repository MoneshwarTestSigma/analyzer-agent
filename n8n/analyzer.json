{
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -8300,
        1080
      ],
      "id": "c6dcdd38-13a8-4e37-ac63-b0a7875c7a8b",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT t.id, t.database_name, t.shard, t.status_enum, td.web_execution_model_enum AS lab_type FROM tenants AS t LEFT JOIN testsigma_lab_details AS td ON t.id=td.tenant_id WHERE t.id={{ $json.tenant_id }}",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        -7840,
        1080
      ],
      "id": "b3260d4b-89e5-4161-97cd-57f609fdea37",
      "name": "Master DB Connector",
      "credentials": {
        "mySql": {
          "id": "tFht3lNyKjo6T4po",
          "name": "Master Analyses"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "language": "python",
        "pythonCode": "urls = {\n  \"step_results_base_url\": \"results-{stack}.testsigma.com/{tenant_id}/step-results/run-{run_id}/test-case-result-{test_case_result_id}/\",\n  \"logs_base_url\": \"{base_url}/executions/logs/{logs_folder}/\",\n  \"screenshot_base_url\": \"{base_url}/executions/{test_case_result_id}/\",\n  \"execution_logs_url\": \"{base_url}/execution-logs/run-{run_id}/test-case-result-{test_case_result_id}.log\",\n  \"failed_step_locator_base_url\": \"{base_url}/failed-step-locator-tree/run-{run_id}/test-case-result-{test_case_result_id}/\",\n  \"element_screenshot_base_url\": \"permanent-attachments-{stack}.testsigma.com/{tenant_id}/element-screenshot/app-version-{app_version_id}/\"\n}\nbase_url = \"quarterly-expirable-attachments-{stack}.testsigma.com/{tenant_id}\"\ndata = _input.item.json\nstack = _('Main input').item.json.get('stack')\ntenant_id = str(data.get('tenant_id'))\ntest_case_result_id = str(data.get('id'))\nrun_id = str(data.get('run_id'))\nenv_run_id = str(data.get('env_run_id'))\nbase_url = base_url.format(\n  stack=stack,\n  tenant_id=tenant_id\n  )\nlogs_folder = f\"test_case_results/{test_case_result_id}\" if data.get('create_session_at_case_level') == 'true' else f\"{env_run_id}\"\ndata['step_results_base_url'] = urls[\"step_results_base_url\"].format(\n        stack=stack,\n        tenant_id=tenant_id,\n        run_id=run_id,\n        test_case_result_id=test_case_result_id\n        )\ndata['logs_base_url'] = urls['logs_base_url'].format(\n        base_url=base_url,\n        logs_folder=logs_folder\n        )\ndata['screenshot_base_url'] = urls['screenshot_base_url'].format(\n        base_url=base_url,\n        test_case_result_id=test_case_result_id\n        )\ndata['execution_logs_url'] = urls['execution_logs_url'].format(\n        base_url=base_url,\n        run_id=run_id,\n        test_case_result_id=test_case_result_id\n        )\ndata['failed_step_locator_base_url'] = urls['failed_step_locator_base_url'].format(\n        base_url=base_url,\n        run_id=run_id,\n        test_case_result_id=test_case_result_id\n)\ndata[\"element_screenshot_base_url\"] = urls[\"element_screenshot_base_url\"].format(\n        stack=stack,\n        tenant_id=tenant_id,\n        app_version_id=str(data.get('app_version_id'))\n)\nreturn data"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -7360,
        1220
      ],
      "id": "b22231fb-1380-43cc-a4b4-d79fee795054",
      "name": "url builder"
    },
    {
      "parameters": {
        "operation": "toJson",
        "mode": "each",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -6360,
        1140
      ],
      "id": "3011feb6-ab34-4786-b0e2-1b2d296fdd31",
      "name": "Convert input json to binary data"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "={{ $('Main input').item.json.path }}/input.json",
        "options": {
          "append": false
        }
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -6120,
        1140
      ],
      "id": "dc98f891-2705-463d-aacd-05accdfb074a",
      "name": "Write input json file"
    },
    {
      "parameters": {
        "command": "=cd {{ $('Main input').item.json.path }} && \nsource myenv/bin/activate &&\npython3 main.py --json_file input.json"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -5920,
        1140
      ],
      "id": "73ebeaf4-edec-4555-81e9-bc3db0b87788",
      "name": "Map Results"
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -7140,
        1220
      ],
      "id": "1f619a89-df45-4cb4-afaf-5f338e789dfb",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n    tcr.id AS id, \n    tcr.test_case_id AS test_case_id, \n    tcr.execution_result_id AS run_id, \n    tcr.env_run_id AS env_run_id, \n    tcr.message AS message, \n    tcr.result_enum AS result,\n    er.application_version_id AS app_version_id,\n    IFNULL(JSON_UNQUOTE(JSON_EXTRACT(er.environment, '$.osVersion')), 'None') AS os_version,\n    IFNULL(JSON_UNQUOTE(JSON_EXTRACT(er.environment, '$.capabilities')), 'None') AS capabilities,\n    IFNULL(JSON_UNQUOTE(JSON_EXTRACT(er.environment, '$.browserVersion')), 'None') AS browser_version,\n    IFNULL(JSON_UNQUOTE(JSON_EXTRACT(er.environment, '$.browser')), 'None') AS browser,\n    IFNULL(JSON_UNQUOTE(JSON_EXTRACT(er.environment, '$.resolution')), 'None') AS resolution,\n    IFNULL(JSON_UNQUOTE(JSON_EXTRACT(er.environment, '$.platform')), 'None') AS platform,\n    IFNULL(JSON_UNQUOTE(JSON_EXTRACT(er.environment, '$.create_session_at_case_level')), 'false') AS create_session_at_case_level,\n    CASE \n      WHEN er.execution_lab_type_enum = 'TestsigmaLab' THEN TRUE \n      ELSE FALSE \n    END AS is_testsigma_lab,\n    CASE \n        WHEN er.execution_lab_type_enum = 'TestsigmaLab' \n        THEN COALESCE(er.testsigma_lab_type, '{{ $json.lab_type }}') \n        ELSE er.execution_lab_type_enum \n    END AS lab_type, \n    {{ $json.id }} AS tenant_id\nFROM test_case_result tcr \nINNER JOIN environment_result er \n    ON tcr.env_run_id = er.id \nWHERE tcr.id = {{ $('Main input').item.json.run_id }} AND tcr.result_enum IN ('FAILURE') AND tcr.message NOT IN (\n        \"Visual differences identified\",\n        \"Test Case pre-requisite failed\",\n        \"Test Suite pre-requisite failed\",\n        \"Test machine prerequisite failed\");",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        -7600,
        1220
      ],
      "id": "3dc02841-21ed-43d9-9caf-4028729cd7c9",
      "name": "Fetch results for failure analysis",
      "alwaysOutputData": true,
      "credentials": {
        "mySql": {
          "id": "mk5xBR8gxvbnAAh8",
          "name": "Tenant Analyzer"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "2ab5a621-626e-425a-8e41-81fecc9b8515",
                    "leftValue": "={{ $json?.output?.parseJson()?.errors?.[0]?.classified_error ? $json.output.parseJson().errors[0].classified_error :  $json.output.parseJson().classified_error }}",
                    "rightValue": "TIMEOUT",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "TIMEOUT"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6682b88b-b908-4754-bcd2-f4dd66723a53",
                    "leftValue": "={{ $json?.output?.parseJson()?.errors?.[0]?.classified_error ? $json.output.parseJson().errors[0].classified_error : \n$json.output.parseJson().classified_error\n}}",
                    "rightValue": "=TEST_DATA",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "TEST_DATA"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json?.output?.parseJson()?.errors?.[0]?.classified_error ? $json.output.parseJson().errors[0].classified_error : \n$json.output.parseJson().classified_error\n}}",
                    "rightValue": "ELEMENT",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "f2ec7db5-a216-4781-bbac-9c4df57c2fe6"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "ELEMENT"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6d3b25cf-c313-4841-a2a2-e4cecfff830f",
                    "leftValue": "={{ $json?.output?.parseJson()?.errors?.[0]?.classified_error ? $json.output.parseJson().errors[0].classified_error : \n$json.output.parseJson().classified_error\n}}",
                    "rightValue": "LAB",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "LAB"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -5060,
        1140
      ],
      "id": "2f967e05-f7d0-4450-a35a-6449defe34a0",
      "name": "Switch"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4-turbo",
          "mode": "list",
          "cachedResultName": "gpt-4-turbo"
        },
        "options": {
          "responseFormat": "json_object"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -5420,
        1360
      ],
      "id": "0b3a1c1f-1f08-414e-abcf-4e8e52c756ac",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "ZT4lcpSLE38rPbz6",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4-turbo",
          "mode": "list",
          "cachedResultName": "gpt-4-turbo"
        },
        "options": {
          "responseFormat": "json_object"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -4320,
        1640
      ],
      "id": "69cc2b84-c327-447c-8904-4912f49dc23e",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "ZT4lcpSLE38rPbz6",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a72e6473-4c24-4956-a7c5-47d19c0ec2e5",
              "name": "capability_data",
              "value": "--- title: \"Common Desired Capabilities\" page_title: \"Streamline Testing Processes with Advanced Capabilities\" metadesc: \"Enhance efficiency with common desired capabilities in testing. Optimise workflows, boost collaboration, and ensure quality with cutting-edge testing features.\" noindex: false order: 15.2 page_id: \"common-desired-capabilities\" search_keyword: \"\" warning: false contextual_links: - type: section   name: \"Contents\" - type: link   name: \"Chrome\"   url: \"#chrome\" - type: link   name: \"Morzilla Firefox\"   url: \"#morzilla-firefox\" - type: link   name: \"Microsoft Edge\"   url: \"#microsoft-edge\" - type: link   name: \"Execution Timeouts Specific in Testsigma Labs\"   url: \"#execution-timeouts-specific-in-testsigma-labs\"   - type: link   name: \"Environment Customizations in Testsigma Labs\"   url: \"#environment-customizations-in-testsigma-labs\" - type: link   name: \"Environment Customizations in BrowserStack\"   url: \"#environment-customizations-in-browserstack\"  - type: link   name: \"Android Specific\"   url: \"#android-specific\"    - type: link   name: \"iOS Specific\"   url: \"#ios-specific\" ---  ---   Below are a few of the most commonly used Desired Capabilities in executions using Testsigma:  ---  ## **Chrome**   |Description|Capability|Data Type|Value| |---|---|---|---| |Accept insecure/expired certificates|acceptInsecureCerts|boolean|true| |Changing User Agent|goog:chromeOptions|String|{\"args\":[\"--user-agent=USER\\_AGENT\\_STRING\\_HERE\"]}<br><br>For Example:<br>{\"args\":[\"--user-agent=Mozilla/5.0 (Linux; \\<Android Version>; \\<Build Tag etc.>) AppleWebKit/\\<WebKit Rev> (KHTML, like Gecko) Chrome/\\<Chrome Rev> Mobile Safari/\\<WebKit Rev>\"]}| |Adding a single Chrome Extension to session|goog:chromeOptions|String|{\"extensions\":[\"path/to/extension\"]}<br><br>More details:<br>[How to add Chrome Extension to a session using Desired Capabilities](https://testsigma.com/docs/desired-capabilities/add-chrome-extension/)| |Adding Chrome Extensions to session|goog:chromeOptions|String|{\"extensions\":[\"path/to/extension1\"],[\"path/to/extension2\"]}<br><br>More details:<br>[How to add Chrome Extension to a session using Desired Capabilities](https://testsigma.com/docs/desired-capabilities/add-chrome-extension/)| |Setting mobile device Emulation|goog:chromeOptions|String|{\"mobileEmulation\":{\"deviceName\":\"iPhone X\"}}<br><br>More details:<br>[How to set Desired Capabilities for emulating Mobile devices using Chrome Browser](https://testsigma.com/docs/desired-capabilities/emulate-mobile-devices-with-chrome/)| |Disabling Browser Notifications|goog:chromeOptions|String|{“args”:[“--disable-notifications”]}| |Setting custom profile for Browser data|goog:chromeOptions|String|{\"args\":[\"user-data-dir=/path/to/your/custom/profile\"]}<br><br>More details:<br>[How to open Chrome with the user-defined profile in Testsigma using Desired Capabilities](https://testsigma.com/docs/desired-capabilities/custom-user-profile-chrome/)| |Setting the Geolocation (Chrome)|<li>goog:chromeOptions</li><li>geolocation</li>|<li>String</li><li>String</li>|{\"profile.default\\_content\\_setting\\_values.geolocation\": 1 }<br><br>51.50735, -0.12776, 100<br><br>More details:<br>[How to manually set a geographical location for Test Cases using Desired Capabilities](https://testsigma.com/docs/desired-capabilities/set-geo-location/)| |Bypassing Chrome download protection<br>(Keep/discard promptly for file downloads)|goog:chromeOptions|String|{\"prefs\":{\"safebrowsing.enabled\":\"true\"}}<br><br>More details:<br>[How to bypass or avoid unsafe download prompt for Google Chrome?](https://testsigma.com/docs/desired-capabilities/avoid-unsafe-download-prompt/)| |Enable the provision of notifications and the inclusion of fabricated media streams.|<li>goog:chromeOptions</li><li>goog:chromeOptions</li><li>goog:chromeOptions</li>|<li>String</li><li>String</li><li>String</li>|<li>{\"args\":[\"--use-fake-ui-for-media-stream\"]}</li><li>{\"args\":[\"--use-fake-device-for-media-stream\"]}</li><li>{\"args\":[\"--auto-select-desktop-capture-source=Entire screen\"]}</li>| |Disable Chrome Alert Notifications|goog:chromeOptions|String|{\"args\":[\"--disable-notifications\"]}|  ---  ## **Morzilla Firefox**   |Description|Capability Name|Data Type|Value| |---|---|---|---| |Setting the Geolocation (Firefox)|firefoxprofile|String|{\"geo.prompt.testing\": true,<br>\"geo.prompt.testing.allow\": true,<br>\"geo.enabled\": true,<br>\"geo.wifi.uri\":<br>\"data:application/json,{\\\"location\\\": {\\\"lat\\\": 34.052235, \\\"lng\\\": -118.243683}, \\\"accuracy\\\": 100.0}\"<br>}<br><br>More details:<br>[How to manually set a geographical location for Test Cases using Desired Capabilities](https://testsigma.com/docs/desired-capabilities/set-geo-location/)| |Accept insecure/expired certificates|accept\\_untrusted\\_certs|boolean|True|  ---  ## **Microsoft Edge**   |Description|Capability Name|Data Type|Value| |---|---|---|---| |Accept insecure/expired certificates|acceptInsecureCerts|boolean|True|  ---  ## **Execution Timeouts Specific in Testsigma Labs**   |Description|Capability Name|Data Type|Value| |---|---|---|---| |Settings user-defined Step timeout duration - As a safety measure to prevent tests from running too long after something has gone wrong, Testsigma limits how long a browser can wait for a test to send a new command.|idleTimeout|Integer|90<br><br>minimum - 0<br>default - 90<br>maximum - 1000<br><br>More details:<br>[How to set Sauce Labs environment-specific settings(step timeout, maximum test duration ) in Testsigma](https://testsigma.com/docs/integrations/test-labs/sauce-labs/)| |Settings user-defined maximum test duration - As a safety measure to prevent tests from running indefinitely, Sauce limits the duration of tests to 30 minutes by default.|maxDuration|Integer|3600<br><br>minimum - 0<br>default - 3600<br>maximum - 10800<br><br>More details:<br>[How to set Sauce Labs environment-specific settings(step timeout, maximum test duration ) in Testsigma](https://testsigma.com/docs/integrations/test-labs/sauce-labs/)|  ---  ## **Environment Customizations in Testsigma Labs**   |Description|Capability|Data Type|Value| |---|---|---|---| |Setting the Timezone of the execution Environment|timeZone|String|Madrid<br>You can get the list of Timezone locations from here:<br>https://en.wikipedia.org/wiki/List_of_tz_database_time_zones<br><br>Use the City name without the Continent Name and replace underscores with space| |Getting Excecution Console log of each url|extendedDebugging|Boolean|True<br><br>More details:<br>[Enable Browser Console Debugging logs](https://testsigma.com/docs/desired-capabilities/enable-browser-console-logs/)|  ---  ## **Environment Customizations in BrowserStack**   |Description|Capability|Data Type|Value| |---|---|---|---| |Enable Visual Logs in BrowserStack|browserstack.debug|Boolean|true| |Enable Local Testing in BrowserStack|browserstack.local|Boolean|true| |Enable Browser Console logs in Browserstack||String|warnings<br><br>More details:<br>[Enable Browser Console Debugging logs](https://testsigma.com/docs/desired-capabilities/enable-browser-console-logs/)|  ---  ## **Android Specific**   |Description|Capability|Data Type|Value| |---|---|---|---| |Persist App data in local Android devices across Hybrid Test sessions|noReset|boolean|true| |Automatically grant required app permissions based on the [Android manifest](https://developer.android.com/guide/topics/manifest/manifest-intro) during installation.|autoGrantPermissions|boolean|true|  ---  ## **iOS Specific**  |Description|Capability|Data Type|Value| |---|---|---|---| |Automatically approve all permission pop-ups, including privacy access requests for location, contacts, and photos.|autoAcceptAlerts|boolean|true| |Automatically dismiss all permission pop-ups, including privacy access permissions like location, contacts, and photos.|autoDismissAlerts|boolean|true|  ---\t",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4640,
        1440
      ],
      "id": "731f58bc-7712-4f61-be1d-09b027b2b7ba",
      "name": "Capability MD data"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8ecde714-dbcd-497e-81e9-1018094fac20",
              "name": "stack",
              "value": "devtesting",
              "type": "string"
            },
            {
              "id": "7bc5c8a2-58b0-4701-81bb-db49802e998a",
              "name": "tenant_id",
              "value": "200001225",
              "type": "string"
            },
            {
              "id": "19af2d63-d6eb-4ab0-b0ca-843f614e1b74",
              "name": "run_id",
              "value": "71",
              "type": "string"
            },
            {
              "id": "8a04e5b3-9df8-4ca3-b741-6ffd13164b9c",
              "name": "path",
              "value": "/Users/moneshwar/Github_repos/analyzer-agent",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -8060,
        1080
      ],
      "id": "44111c37-dd6f-4b79-88ed-07f30bd490d6",
      "name": "Main input"
    },
    {
      "parameters": {
        "command": "=cd {{ $('Main input').item.json.path }} && \nsource myenv/bin/activate &&\npython analyzer_prompt.py"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -5700,
        1140
      ],
      "id": "be7da6e7-dd19-49bb-8431-6d1e106b34c7",
      "name": "Generate analyzer prompt"
    },
    {
      "parameters": {
        "content": "## Failure Analysis Flow\n\n\n",
        "height": 80,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -6880,
        1400
      ],
      "typeVersion": 1,
      "id": "b5fdaffe-cdb3-4ed6-857c-8c14b9fa16a9",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.stdout }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -5420,
        1140
      ],
      "id": "a480e904-aeb0-4a09-a473-a7517574fa56",
      "name": "Failure Classifier",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an AI assistant specialized in analyzing test execution logs and providing troubleshooting advice for browser session issues. Your task is to process input data , analyze it, and provide recommendations while maintaining the JSON structure in your output by replacing the suggestions in provided AGENT_OUTPUT.\n\n             First, review the following information about common browser session issues and their solutions:\n\n             <browser_session_issues>\n             - Timeout Exception: Browser session doesn't start in time due to outdated Selenium drivers. Solution: Update drivers in the Apache Tomcat folder.\n             - Session Not Found: The browser session starts but fails to communicate with Testsigma. Solution: Update drivers (Windows) or enable Allow Remote Automation in Safari (Mac).\n             - Driver Server Died: Browser automation driver (WebDriver) crashes or becomes unresponsive. Solution: Restart the WebDriver service.\n             - Safari Session Timeout: Safari starts but fails to connect with WebDriver. Solution: Restart Safari and enable remote automation.\n             - Safari Already Paired: Safari WebDriver is running and unresponsive. Solution: Close previous WebDriver sessions before starting a new one.\n             - Element Timeout: Testsigma cannot find a UI element. Solution: Re-check the UI Identifier or add a Wait step.\n             - Safari Remote Automation Disabled: WebDriver cannot control Safari. Solution: Enable Allow Remote Automation in Safari's Develop menu.\n             - Invalid System Files: Temporary files (e.g., '.DS_Store', 'Thumb.db') interfere with Testsigma. Solution: Delete unnecessary files from the driver folder.\n             - Browser Start Failure: Browser is unreachable or incompatible. Solution: Use the latest stable browser version.\n             - Invalid Chrome Options: Incorrect Desired Capabilities format in Execution Configuration. Solution: Correct the format.\n             - LinkedHashMap Casting Error: Desired Capabilities format is incorrect. Solution: Fix syntax in Execution Configuration.\n             - ChromeDriver Version Mismatch: Testsigma uses an outdated ChromeDriver. Solution: Download and place the latest ChromeDriver in Testsigma_Agent > Drivers folder.\n             </browser_session_issues>\n\n             You will be provided with the following information in JSON format:\n\n             <lab_type>lab_type: {{ $('Loop Over Items').item.json.lab_type }}, is_private_lab: {{ $('Loop Over Items').item.json.is_testsigma_lab }} </lab_type>\n\n             <environment_details>{\nos_version:{{ $('Loop Over Items').item.json.os_version }}, browser_version:{{ $('Loop Over Items').item.json.browser_version }}, browser:{{ $('Loop Over Items').item.json.browser }}, resolution:{{ $('Loop Over Items').item.json.resolution }}, platform:{{ $('Loop Over Items').item.json.platform }}, capabilities: {{ $('Loop Over Items').item.json.capabilities }}\n             }</environment_details>\n\n             <previous_agent_output>{{ $('Failure Classifier').item.json.output }}</previous_agent_output>\n\n          Also use the given md format file of most common desired capabilities to give the suggestions if applicable by suggesting the capability addition:\n\n            <capabilities>{{ $json.capability_data }}</capabilities>\n\n             Your task is to analyze this information and provide troubleshooting advice. Follow these steps:\n\n             1. Parse the input AGENT_OUTPUT data and read all the given input data\n\n             3. Based on your analysis, summarize the problem and suggest a fix that might solve the issue.\n\n             4. Format your output as a JSON object of AGENT_OUTPUT, maintaining the structure of the input JSON but replacing the \"suggestions\" field with your recommendations.\n\n             5. If any of the capabilities mentioned in the <capabilities> section will fix the problem, add \"desired_capability_suggestions\"in the output\n\n            6. Make sure that the given capability in \"desired_capability_suggestions\" should be able to solve the issue and not the capabilities to debug or any other capabilities.\n\n            7. DO NOT suggest any capabilities in \"desired_capability_suggestions\" other than the mentioned in the <capabilities>.\n\n            8. If you dont have a accurate context on suggesting an \"desired_capability_suggestions\" do not suggest any and do not hallucinate any capabilities. \n\n             Example output structure (do not copy the content, only the structure):\n\n             {\n             \"classified_error\":\"data from agent output\"\n             \"root_cause\":\"data from previous agent output\"\n             \"suggestions\": [\"Actionable step 1\", \"Actionable step 2\"]\n            \"desired_capability_suggestions\": [{\"key\": \"string\", \"dataType\": \"string\", \"value\": \"string\"}]\n             }\n\n             Remember to be specific and concise in your final output, focusing only on the most relevant information and actionable recommendations. Your output should consist only of the JSON object and should not duplicate or rehash any of the work you did in the troubleshooting analysis.",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -4340,
        1440
      ],
      "id": "f4d1cafa-bb25-44b9-ab58-70933afd5b67",
      "name": "Lab failure analyzer"
    },
    {
      "parameters": {
        "command": "=cd {{ $('Main input').item.json.path }} && \nsource myenv/bin/activate &&\npython element_llm.py"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -4540,
        1180
      ],
      "id": "5c161844-556f-4f2a-bbde-cbd00460ad62",
      "name": "Generate element failure analysis"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b394048b-04d3-4cf3-85ef-4186f35fe511",
              "name": "output",
              "value": "={{ $json.stdout }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4260,
        1180
      ],
      "id": "ddbe8260-e97f-4da4-a05a-f6985df2ea3b",
      "name": "Get element failure analysis",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "upload",
        "bucketName": "custify-raw-data",
        "fileName": "=analyzer-agent/{{ $('Loop Over Items').item.json.tenant_id }}/case-{{ $('Loop Over Items').item.json.test_case_id }}/suggestions/suggestion-{{ $('Loop Over Items').item.json.id }}.json",
        "binaryData": false,
        "fileContent": "={{\n  $('Get element failure analysis')?.isExecuted ? \n  JSON.stringify($('Get element failure analysis')?.item?.json?.output) :\n  (\n    $('Lab failure analyzer')?.isExecuted ?\n    JSON.stringify($('Lab failure analyzer')?.item?.json) :\n    JSON.stringify($('Switch')?.item?.json)\n  )\n}}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.s3",
      "typeVersion": 1,
      "position": [
        -3740,
        960
      ],
      "id": "9d83dc74-0533-4964-a5dc-a857f164c671",
      "name": "Element failure Analysis uploader",
      "credentials": {
        "s3": {
          "id": "IttgcuyQmGboGqT1",
          "name": "S3 account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e4b281c6-b360-4835-9462-97086945fc6e",
              "leftValue": "={{ $json.success }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3340,
        1600
      ],
      "id": "3af8b823-82c5-4d01-a3c7-8d4cd65149c8",
      "name": "Failure report uploader"
    }
  ],
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Main input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Master DB Connector": {
      "main": [
        [
          {
            "node": "Fetch results for failure analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "url builder": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert input json to binary data": {
      "main": [
        [
          {
            "node": "Write input json file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Write input json file": {
      "main": [
        [
          {
            "node": "Map Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Map Results": {
      "main": [
        [
          {
            "node": "Generate analyzer prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Convert input json to binary data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch results for failure analysis": {
      "main": [
        [
          {
            "node": "url builder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Element failure Analysis uploader",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Element failure Analysis uploader",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate element failure analysis",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Capability MD data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Failure Classifier",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Lab failure analyzer",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Capability MD data": {
      "main": [
        [
          {
            "node": "Lab failure analyzer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Main input": {
      "main": [
        [
          {
            "node": "Master DB Connector",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate analyzer prompt": {
      "main": [
        [
          {
            "node": "Failure Classifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Failure Classifier": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lab failure analyzer": {
      "main": [
        [
          {
            "node": "Element failure Analysis uploader",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate element failure analysis": {
      "main": [
        [
          {
            "node": "Get element failure analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get element failure analysis": {
      "main": [
        [
          {
            "node": "Element failure Analysis uploader",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Element failure Analysis uploader": {
      "main": [
        [
          {
            "node": "Failure report uploader",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Failure report uploader": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b5cff35ee23cc56c30ead78eebf7e655fbec693f9201b19ee47eb093083ae09e"
  }
}